# Stage 1: Build the Angular application
FROM node:18-alpine AS build
WORKDIR /app

# Copy package.json and package-lock.json to install dependencies.
# This improves caching: if source code changes but dependencies don't, npm install is skipped.
COPY frontend/package*.json ./

# Install project dependencies
RUN npm install

# Copy the rest of the Angular source code
COPY frontend/. .

# Build the Angular application for production.
# --output-path: Specifies where the built files will be placed inside the container.
# --configuration production: Builds with production optimizations.
RUN npm run build -- --output-path ./dist/finance-tracker --configuration production

# Stage 2: Serve the application with Nginx
FROM nginx:alpine AS final
# Remove Nginx's default configuration
RUN rm /etc/nginx/conf.d/default.conf

# Copy our custom Nginx configuration for Angular routing and API proxying
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Copy the built Angular application from the build stage to Nginx's serving directory
COPY --from=build /app/dist/finance-tracker /usr/share/nginx/html

# Expose Nginx's default HTTP port
EXPOSE 80

# Start Nginx in the foreground
CMD ["nginx", "-g", "daemon off;"]